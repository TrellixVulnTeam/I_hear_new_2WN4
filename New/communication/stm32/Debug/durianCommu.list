
durianCommu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003464  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800361c  0800361c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003624  08003624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800362c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003638  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003638  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d0  00000000  00000000  00028a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149c1  00000000  00000000  0002acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008586  00000000  00000000  0003f681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b48  00000000  00000000  00047c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c974f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a50  00000000  00000000  000c97a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080035e4 	.word	0x080035e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080035e4 	.word	0x080035e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa8c 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f83a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8ee 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f8cc 	bl	8000688 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f89e 	bl	8000630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)RxBuffer, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4913      	ldr	r1, [pc, #76]	; (8000544 <main+0x68>)
 80004f8:	4813      	ldr	r0, [pc, #76]	; (8000548 <main+0x6c>)
 80004fa:	f001 ff1a 	bl	8002332 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(menu){
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x70>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2bb1      	cmp	r3, #177	; 0xb1
 8000504:	d118      	bne.n	8000538 <main+0x5c>
	  case 177: //Request Mode 01
		  RxBuffer[0] = 0;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
		  test = 1;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x74>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
		  TxBuffer[0] = 177;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x78>)
 8000514:	22b1      	movs	r2, #177	; 0xb1
 8000516:	701a      	strb	r2, [r3, #0]
		  TxBuffer[1] = 0;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <main+0x78>)
 800051a:	2200      	movs	r2, #0
 800051c:	705a      	strb	r2, [r3, #1]
		  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, 2, 1);
 800051e:	2301      	movs	r3, #1
 8000520:	2202      	movs	r2, #2
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <main+0x78>)
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <main+0x6c>)
 8000526:	f001 fe72 	bl	800220e <HAL_UART_Transmit>
		  lastMenu = menu;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <main+0x70>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <main+0x7c>)
 8000530:	701a      	strb	r2, [r3, #0]
		  menu = 0;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <main+0x70>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]

	  default:
		  menu = RxBuffer[0];
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <main+0x68>)
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <main+0x70>)
 800053e:	701a      	strb	r2, [r3, #0]
	  switch(menu){
 8000540:	e7dd      	b.n	80004fe <main+0x22>
 8000542:	bf00      	nop
 8000544:	200000cc 	.word	0x200000cc
 8000548:	20000028 	.word	0x20000028
 800054c:	200000d3 	.word	0x200000d3
 8000550:	200000d2 	.word	0x200000d2
 8000554:	200000d0 	.word	0x200000d0
 8000558:	200000d4 	.word	0x200000d4

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f832 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f92e 	bl	8001844 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 f8d9 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fb90 	bl	8001d34 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f8c3 	bl	80007a4 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_USART2_UART_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x50>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000648:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_USART2_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x50>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x50>)
 800066c:	f001 fd82 	bl	8002174 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 f895 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	40004400 	.word	0x40004400

08000688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA_Init+0x3c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <MX_DMA_Init+0x3c>)
 8000698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_DMA_Init+0x3c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2010      	movs	r0, #16
 80006b0:	f000 faf1 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006b4:	2010      	movs	r0, #16
 80006b6:	f000 fb0a 	bl	8000cce <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0xd4>)
 8000754:	f001 f85c 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_GPIO_Init+0xd8>)
 8000770:	f000 feca 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0xd4>)
 800078c:	f000 febc 	bl	8001508 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f000 fa46 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <HAL_UART_MspInit+0xf4>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d163      	bne.n	80008ea <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <HAL_UART_MspInit+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085a:	230c      	movs	r3, #12
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086a:	2307      	movs	r3, #7
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <HAL_UART_MspInit+0xfc>)
 8000876:	f000 fe47 	bl	8001508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_UART_MspInit+0x100>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <HAL_UART_MspInit+0x104>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000886:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_UART_MspInit+0x100>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x100>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008c0:	f000 fa20 	bl	8000d04 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008ca:	f7ff ff6b 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008d2:	639a      	str	r2, [r3, #56]	; 0x38
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	2026      	movs	r0, #38	; 0x26
 80008e0:	f000 f9d9 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e4:	2026      	movs	r0, #38	; 0x26
 80008e6:	f000 f9f2 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	2000006c 	.word	0x2000006c
 8000904:	40026088 	.word	0x40026088

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8a4 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA1_Stream5_IRQHandler+0x10>)
 8000962:	f000 fb67 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000006c 	.word	0x2000006c

08000970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART2_IRQHandler+0x10>)
 8000976:	f001 fd0d 	bl	8002394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000028 	.word	0x20000028

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d2:	f7ff ffd7 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f002 fdd9 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fd7f 	bl	80004dc <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	0800362c 	.word	0x0800362c
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	200000dc 	.word	0x200000dc

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f92b 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff febe 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f943 	bl	8000cea <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	f000 f90b 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200000d8 	.word	0x200000d8

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200000d8 	.word	0x200000d8

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff29 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff31 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff feda 	bl	8000ac8 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e099      	b.n	8000e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2202      	movs	r2, #2
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d40:	e00f      	b.n	8000d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d42:	f7ff fec1 	bl	8000ac8 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d908      	bls.n	8000d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e078      	b.n	8000e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e8      	bne.n	8000d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_DMA_Init+0x158>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d107      	bne.n	8000dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f023 0307 	bic.w	r3, r3, #7
 8000de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d117      	bne.n	8000e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00e      	beq.n	8000e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fb01 	bl	8001410 <DMA_CheckFifoParam>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e22:	2301      	movs	r3, #1
 8000e24:	e016      	b.n	8000e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fab8 	bl	80013a4 <DMA_CalcBaseAndBitshift>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	223f      	movs	r2, #63	; 0x3f
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f010803f 	.word	0xf010803f

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Start_IT+0x26>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e040      	b.n	8000f08 <HAL_DMA_Start_IT+0xa8>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d12f      	bne.n	8000efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 fa4a 	bl	8001348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	223f      	movs	r2, #63	; 0x3f
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0216 	orr.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0208 	orr.w	r2, r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e005      	b.n	8000f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f1e:	f7ff fdd3 	bl	8000ac8 <HAL_GetTick>
 8000f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e052      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0216 	bic.w	r2, r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <HAL_DMA_Abort+0x62>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0208 	bic.w	r2, r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f92:	e013      	b.n	8000fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f94:	f7ff fd98 	bl	8000ac8 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d90c      	bls.n	8000fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e015      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e4      	bne.n	8000f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fce:	223f      	movs	r2, #63	; 0x3f
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00c      	b.n	8001028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001040:	4b8e      	ldr	r3, [pc, #568]	; (800127c <HAL_DMA_IRQHandler+0x248>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a8e      	ldr	r2, [pc, #568]	; (8001280 <HAL_DMA_IRQHandler+0x24c>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0a9b      	lsrs	r3, r3, #10
 800104c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105e:	2208      	movs	r2, #8
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	2208      	movs	r2, #8
 800108e:	409a      	lsls	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	2201      	movs	r2, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d012      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c2:	2201      	movs	r2, #1
 80010c4:	409a      	lsls	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d012      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2204      	movs	r2, #4
 80010fa:	409a      	lsls	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	f043 0204 	orr.w	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	2210      	movs	r2, #16
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d043      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03c      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2210      	movs	r2, #16
 8001130:	409a      	lsls	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d018      	beq.n	8001176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d108      	bne.n	8001164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
 8001162:	e01f      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01b      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	4798      	blx	r3
 8001174:	e016      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2220      	movs	r2, #32
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 808f 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8087 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ca:	2220      	movs	r2, #32
 80011cc:	409a      	lsls	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d136      	bne.n	800124c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0216 	bic.w	r2, r2, #22
 80011ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <HAL_DMA_IRQHandler+0x1da>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	223f      	movs	r2, #63	; 0x3f
 8001224:	409a      	lsls	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123e:	2b00      	cmp	r3, #0
 8001240:	d07e      	beq.n	8001340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
        }
        return;
 800124a:	e079      	b.n	8001340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01d      	beq.n	8001296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	2b00      	cmp	r3, #0
 800126e:	d031      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
 8001278:	e02c      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e01e      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d022      	beq.n	800132e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2205      	movs	r2, #5
 80012ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	d307      	bcc.n	800131c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f2      	bne.n	8001300 <HAL_DMA_IRQHandler+0x2cc>
 800131a:	e000      	b.n	800131e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800131c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
 800133e:	e000      	b.n	8001342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001340:	bf00      	nop
    }
  }
}
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d108      	bne.n	8001388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001386:	e007      	b.n	8001398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3b10      	subs	r3, #16
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <DMA_CalcBaseAndBitshift+0x64>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <DMA_CalcBaseAndBitshift+0x68>)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d909      	bls.n	80013e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	1d1a      	adds	r2, r3, #4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58
 80013e4:	e007      	b.n	80013f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	aaaaaaab 	.word	0xaaaaaaab
 800140c:	08003614 	.word	0x08003614

08001410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11f      	bne.n	800146a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d856      	bhi.n	80014de <DMA_CheckFifoParam+0xce>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <DMA_CheckFifoParam+0x28>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001449 	.word	0x08001449
 800143c:	0800145b 	.word	0x0800145b
 8001440:	08001449 	.word	0x08001449
 8001444:	080014df 	.word	0x080014df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d046      	beq.n	80014e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001458:	e043      	b.n	80014e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001462:	d140      	bne.n	80014e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001468:	e03d      	b.n	80014e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	d121      	bne.n	80014b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d837      	bhi.n	80014ea <DMA_CheckFifoParam+0xda>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <DMA_CheckFifoParam+0x70>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	08001497 	.word	0x08001497
 8001488:	08001491 	.word	0x08001491
 800148c:	080014a9 	.word	0x080014a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
      break;
 8001494:	e030      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d025      	beq.n	80014ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a6:	e022      	b.n	80014ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014b0:	d11f      	bne.n	80014f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014b6:	e01c      	b.n	80014f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d903      	bls.n	80014c6 <DMA_CheckFifoParam+0xb6>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d003      	beq.n	80014cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014c4:	e018      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
      break;
 80014ca:	e015      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
      break;
 80014dc:	e00b      	b.n	80014f6 <DMA_CheckFifoParam+0xe6>
      break;
 80014de:	bf00      	nop
 80014e0:	e00a      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e008      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
 80014e8:	e006      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ea:	bf00      	nop
 80014ec:	e004      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
    }
  } 
  
  return status; 
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e159      	b.n	80017d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 8148 	bne.w	80017d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	2b02      	cmp	r3, #2
 8001558:	d130      	bne.n	80015bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a2 	beq.w	80017d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a56      	ldr	r2, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x2ec>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_GPIO_Init+0x2f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x202>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x1fe>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_GPIO_Init+0x2f8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_GPIO_Init+0x2fc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x1f6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a45      	ldr	r2, [pc, #276]	; (8001808 <HAL_GPIO_Init+0x300>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x1f2>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x204>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x204>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x204>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x204>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x204>
 800170a:	2300      	movs	r3, #0
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f002 0203 	and.w	r2, r2, #3
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	4935      	ldr	r1, [pc, #212]	; (80017f4 <HAL_GPIO_Init+0x2ec>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_GPIO_Init+0x304>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174e:	4a2f      	ldr	r2, [pc, #188]	; (800180c <HAL_GPIO_Init+0x304>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_GPIO_Init+0x304>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001778:	4a24      	ldr	r2, [pc, #144]	; (800180c <HAL_GPIO_Init+0x304>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_GPIO_Init+0x304>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a2:	4a1a      	ldr	r2, [pc, #104]	; (800180c <HAL_GPIO_Init+0x304>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_GPIO_Init+0x304>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017cc:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_GPIO_Init+0x304>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	f67f aea2 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e267      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d00c      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d112      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e242      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b76      	ldr	r3, [pc, #472]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a75      	ldr	r2, [pc, #468]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6f      	ldr	r2, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6c      	ldr	r2, [pc, #432]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b69      	ldr	r3, [pc, #420]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a68      	ldr	r2, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a65      	ldr	r2, [pc, #404]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8e4 	bl	8000ac8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f8e0 	bl	8000ac8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e207      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff f8d0 	bl	8000ac8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f8cc 	bl	8000ac8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1f3      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1c7      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_RCC_OscConfig+0x244>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f885 	bl	8000ac8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff f881 	bl	8000ac8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1a8      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4925      	ldr	r1, [pc, #148]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_RCC_OscConfig+0x244>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f864 	bl	8000ac8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff f860 	bl	8000ac8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e187      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d036      	beq.n	8001a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d016      	beq.n	8001a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_RCC_OscConfig+0x248>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f844 	bl	8000ac8 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff f840 	bl	8000ac8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e167      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x240>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
 8001a62:	e01b      	b.n	8001a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_OscConfig+0x248>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f82d 	bl	8000ac8 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e00e      	b.n	8001a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff f829 	bl	8000ac8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d907      	bls.n	8001a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e150      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	42470000 	.word	0x42470000
 8001a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ea      	bne.n	8001a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8097 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b7d      	ldr	r3, [pc, #500]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a7c      	ldr	r2, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b77      	ldr	r3, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x474>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x474>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7fe ffe9 	bl	8000ac8 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7fe ffe5 	bl	8000ac8 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e10c      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x474>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2ea>
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a63      	ldr	r2, [pc, #396]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	e01c      	b.n	8001b68 <HAL_RCC_OscConfig+0x324>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x30c>
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a5b      	ldr	r2, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0x324>
 8001b50:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7fe ffaa 	bl	8000ac8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7fe ffa6 	bl	8000ac8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0cb      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ee      	beq.n	8001b78 <HAL_RCC_OscConfig+0x334>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7fe ff94 	bl	8000ac8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7fe ff90 	bl	8000ac8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0b5      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ee      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a1 	beq.w	8001d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d05c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d141      	bne.n	8001c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_RCC_OscConfig+0x478>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff64 	bl	8000ac8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe ff60 	bl	8000ac8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e087      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	019b      	lsls	r3, r3, #6
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x478>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe ff39 	bl	8000ac8 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe ff35 	bl	8000ac8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e05c      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x416>
 8001c78:	e054      	b.n	8001d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x478>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7fe ff22 	bl	8000ac8 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe ff1e 	bl	8000ac8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e045      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x444>
 8001ca6:	e03d      	b.n	8001d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e038      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4ec>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d028      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d121      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11a      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d111      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cc      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d90c      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d044      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e067      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4934      	ldr	r1, [pc, #208]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7fe fe50 	bl	8000ac8 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7fe fe4c 	bl	8000ac8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20c      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f821 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	490a      	ldr	r1, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	5ccb      	ldrb	r3, [r1, r3]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fdb0 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	080035fc 	.word	0x080035fc
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f04:	b094      	sub	sp, #80	; 0x50
 8001f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d00d      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x40>
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	f200 80e1 	bhi.w	80020ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f32:	e0db      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f38:	e0db      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f3e:	e0d8      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f72:	4622      	mov	r2, r4
 8001f74:	462b      	mov	r3, r5
 8001f76:	f04f 0000 	mov.w	r0, #0
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	0159      	lsls	r1, r3, #5
 8001f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f84:	0150      	lsls	r0, r2, #5
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	1a51      	subs	r1, r2, r1
 8001f8e:	6139      	str	r1, [r7, #16]
 8001f90:	4629      	mov	r1, r5
 8001f92:	eb63 0301 	sbc.w	r3, r3, r1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	018b      	lsls	r3, r1, #6
 8001fa8:	4651      	mov	r1, sl
 8001faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fae:	4651      	mov	r1, sl
 8001fb0:	018a      	lsls	r2, r1, #6
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001fb8:	4659      	mov	r1, fp
 8001fba:	eb63 0901 	sbc.w	r9, r3, r1
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fd2:	4690      	mov	r8, r2
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	eb18 0303 	adds.w	r3, r8, r3
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	462b      	mov	r3, r5
 8001fe0:	eb49 0303 	adc.w	r3, r9, r3
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	024b      	lsls	r3, r1, #9
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	024a      	lsls	r2, r1, #9
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002006:	2200      	movs	r2, #0
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
 800200a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800200c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002010:	f7fe f8e2 	bl	80001d8 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4613      	mov	r3, r2
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	e058      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	2200      	movs	r2, #0
 8002026:	4618      	mov	r0, r3
 8002028:	4611      	mov	r1, r2
 800202a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002038:	4642      	mov	r2, r8
 800203a:	464b      	mov	r3, r9
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	0159      	lsls	r1, r3, #5
 8002046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204a:	0150      	lsls	r0, r2, #5
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4641      	mov	r1, r8
 8002052:	ebb2 0a01 	subs.w	sl, r2, r1
 8002056:	4649      	mov	r1, r9
 8002058:	eb63 0b01 	sbc.w	fp, r3, r1
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800206c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002070:	ebb2 040a 	subs.w	r4, r2, sl
 8002074:	eb63 050b 	sbc.w	r5, r3, fp
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	00eb      	lsls	r3, r5, #3
 8002082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002086:	00e2      	lsls	r2, r4, #3
 8002088:	4614      	mov	r4, r2
 800208a:	461d      	mov	r5, r3
 800208c:	4643      	mov	r3, r8
 800208e:	18e3      	adds	r3, r4, r3
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	464b      	mov	r3, r9
 8002094:	eb45 0303 	adc.w	r3, r5, r3
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a6:	4629      	mov	r1, r5
 80020a8:	028b      	lsls	r3, r1, #10
 80020aa:	4621      	mov	r1, r4
 80020ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b0:	4621      	mov	r1, r4
 80020b2:	028a      	lsls	r2, r1, #10
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	2200      	movs	r2, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	61fa      	str	r2, [r7, #28]
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	f7fe f888 	bl	80001d8 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3750      	adds	r7, #80	; 0x50
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	00f42400 	.word	0x00f42400
 8002108:	007a1200 	.word	0x007a1200

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002128:	f7ff fff0 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	0800360c 	.word	0x0800360c

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002150:	f7ff ffdc 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0b5b      	lsrs	r3, r3, #13
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	0800360c 	.word	0x0800360c

08002174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e03f      	b.n	8002206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fb30 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 ff73 	bl	80030a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b08a      	sub	sp, #40	; 0x28
 8002212:	af02      	add	r7, sp, #8
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d17c      	bne.n	8002328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_Transmit+0x2c>
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e075      	b.n	800232a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_UART_Transmit+0x3e>
 8002248:	2302      	movs	r3, #2
 800224a:	e06e      	b.n	800232a <HAL_UART_Transmit+0x11c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2221      	movs	r2, #33	; 0x21
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002262:	f7fe fc31 	bl	8000ac8 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227c:	d108      	bne.n	8002290 <HAL_UART_Transmit+0x82>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	e003      	b.n	8002298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a0:	e02a      	b.n	80022f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fc2b 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e036      	b.n	800232a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10b      	bne.n	80022da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3302      	adds	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e007      	b.n	80022ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1cf      	bne.n	80022a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fbfb 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	d11d      	bne.n	8002388 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UART_Receive_DMA+0x26>
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e016      	b.n	800238a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UART_Receive_DMA+0x38>
 8002366:	2302      	movs	r3, #2
 8002368:	e00f      	b.n	800238a <HAL_UART_Receive_DMA+0x58>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	461a      	mov	r2, r3
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fc30 	bl	8002be4 <UART_Start_Receive_DMA>
 8002384:	4603      	mov	r3, r0
 8002386:	e000      	b.n	800238a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0ba      	sub	sp, #232	; 0xe8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_UART_IRQHandler+0x66>
 80023e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fd9b 	bl	8002f2e <UART_Receive_IT>
      return;
 80023f8:	e256      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80de 	beq.w	80025c0 <HAL_UART_IRQHandler+0x22c>
 8002404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002414:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80d1 	beq.w	80025c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_UART_IRQHandler+0xae>
 800242a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_UART_IRQHandler+0xd2>
 800244e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_UART_IRQHandler+0xf6>
 8002472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f043 0204 	orr.w	r2, r3, #4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d011      	beq.n	80024ba <HAL_UART_IRQHandler+0x126>
 8002496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f043 0208 	orr.w	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 81ed 	beq.w	800289e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_UART_IRQHandler+0x14e>
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fd26 	bl	8002f2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_UART_IRQHandler+0x17a>
 8002506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04f      	beq.n	80025ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fc2e 	bl	8002d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d141      	bne.n	80025a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002530:	e853 3f00 	ldrex	r3, [r3]
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800253c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800254e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800255a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1d9      	bne.n	8002522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4a7d      	ldr	r2, [pc, #500]	; (8002770 <HAL_UART_IRQHandler+0x3dc>)
 800257c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fd34 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00e      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9a4 	bl	80028ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e00a      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f9a0 	bl	80028ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e006      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f99c 	bl	80028ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025ba:	e170      	b.n	800289e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	bf00      	nop
    return;
 80025be:	e16e      	b.n	800289e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 814a 	bne.w	800285e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8143 	beq.w	800285e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 813c 	beq.w	800285e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	f040 80b4 	bne.w	8002774 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8140 	beq.w	80028a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 8139 	bcs.w	80028a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002636:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	f000 8088 	beq.w	8002756 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800265c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800267e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800268a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1d9      	bne.n	8002646 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3314      	adds	r3, #20
 8002698:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3314      	adds	r3, #20
 80026b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e1      	bne.n	8002692 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e3      	bne.n	80026ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002726:	f023 0310 	bic.w	r3, r3, #16
 800272a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002738:	65ba      	str	r2, [r7, #88]	; 0x58
 800273a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800273e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e3      	bne.n	8002714 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fbdd 	bl	8000f10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800275e:	b29b      	uxth	r3, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b29b      	uxth	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8ca 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800276c:	e099      	b.n	80028a2 <HAL_UART_IRQHandler+0x50e>
 800276e:	bf00      	nop
 8002770:	08002e37 	.word	0x08002e37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277c:	b29b      	uxth	r3, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 808b 	beq.w	80028a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8086 	beq.w	80028a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027be:	647a      	str	r2, [r7, #68]	; 0x44
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e3      	bne.n	800279a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	623b      	str	r3, [r7, #32]
   return(result);
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3314      	adds	r3, #20
 80027f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027f6:	633a      	str	r2, [r7, #48]	; 0x30
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e3      	bne.n	80027d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	60fb      	str	r3, [r7, #12]
   return(result);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0310 	bic.w	r3, r3, #16
 800282e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800283c:	61fa      	str	r2, [r7, #28]
 800283e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	69b9      	ldr	r1, [r7, #24]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	617b      	str	r3, [r7, #20]
   return(result);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e3      	bne.n	8002818 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f852 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800285c:	e023      	b.n	80028a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_UART_IRQHandler+0x4ea>
 800286a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 faf1 	bl	8002e5e <UART_Transmit_IT>
    return;
 800287c:	e014      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00e      	beq.n	80028a8 <HAL_UART_IRQHandler+0x514>
 800288a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fb31 	bl	8002efe <UART_EndTransmit_IT>
    return;
 800289c:	e004      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
    return;
 800289e:	bf00      	nop
 80028a0:	e002      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
      return;
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
      return;
 80028a6:	bf00      	nop
  }
}
 80028a8:	37e8      	adds	r7, #232	; 0xe8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop

080028b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b09c      	sub	sp, #112	; 0x70
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d172      	bne.n	8002a1a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	2200      	movs	r2, #0
 8002938:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800294a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002950:	66bb      	str	r3, [r7, #104]	; 0x68
 8002952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800295a:	65ba      	str	r2, [r7, #88]	; 0x58
 800295c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	667b      	str	r3, [r7, #100]	; 0x64
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800298e:	647a      	str	r2, [r7, #68]	; 0x44
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e5      	bne.n	800296e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	623b      	str	r3, [r7, #32]
   return(result);
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029c2:	633a      	str	r2, [r7, #48]	; 0x30
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ca:	e841 2300 	strex	r3, r2, [r1]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e5      	bne.n	80029a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d119      	bne.n	8002a1a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	e853 3f00 	ldrex	r3, [r3]
 80029f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f023 0310 	bic.w	r3, r3, #16
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	617b      	str	r3, [r7, #20]
   return(result);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e5      	bne.n	80029e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a2a:	f7ff ff69 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a2e:	e002      	b.n	8002a36 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002a30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a32:	f7ff ff47 	bl	80028c4 <HAL_UART_RxCpltCallback>
}
 8002a36:	bf00      	nop
 8002a38:	3770      	adds	r7, #112	; 0x70
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ff4e 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a64:	e002      	b.n	8002a6c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff ff36 	bl	80028d8 <HAL_UART_RxHalfCpltCallback>
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b21      	cmp	r3, #33	; 0x21
 8002aa6:	d108      	bne.n	8002aba <UART_DMAError+0x46>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ab4:	68b8      	ldr	r0, [r7, #8]
 8002ab6:	f000 f933 	bl	8002d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b22      	cmp	r3, #34	; 0x22
 8002ada:	d108      	bne.n	8002aee <UART_DMAError+0x7a>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ae8:	68b8      	ldr	r0, [r7, #8]
 8002aea:	f000 f941 	bl	8002d70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002afa:	68b8      	ldr	r0, [r7, #8]
 8002afc:	f7ff fef6 	bl	80028ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b090      	sub	sp, #64	; 0x40
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	e050      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d04c      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b28:	f7fd ffce 	bl	8000ac8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d241      	bcs.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b58:	637a      	str	r2, [r7, #52]	; 0x34
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e5      	bne.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b8c:	623a      	str	r2, [r7, #32]
 8002b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	69f9      	ldr	r1, [r7, #28]
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e5      	bne.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e00f      	b.n	8002bdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d09f      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3740      	adds	r7, #64	; 0x40
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b098      	sub	sp, #96	; 0x60
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <UART_Start_Receive_DMA+0x130>)
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4a3f      	ldr	r2, [pc, #252]	; (8002d18 <UART_Start_Receive_DMA+0x134>)
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <UART_Start_Receive_DMA+0x138>)
 8002c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c2c:	f107 0308 	add.w	r3, r7, #8
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f7fe f90c 	bl	8000e60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cec:	653b      	str	r3, [r7, #80]	; 0x50
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cf6:	627a      	str	r2, [r7, #36]	; 0x24
 8002cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6a39      	ldr	r1, [r7, #32]
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e5      	bne.n	8002cd6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3760      	adds	r7, #96	; 0x60
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	08002919 	.word	0x08002919
 8002d18:	08002a3f 	.word	0x08002a3f
 8002d1c:	08002a75 	.word	0x08002a75

08002d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	61ba      	str	r2, [r7, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	613b      	str	r3, [r7, #16]
   return(result);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e5      	bne.n	8002d28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d64:	bf00      	nop
 8002d66:	3724      	adds	r7, #36	; 0x24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b095      	sub	sp, #84	; 0x54
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d98:	643a      	str	r2, [r7, #64]	; 0x40
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3314      	adds	r3, #20
 8002db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e5      	bne.n	8002dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d119      	bne.n	8002e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e08:	61ba      	str	r2, [r7, #24]
 8002e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	613b      	str	r3, [r7, #16]
   return(result);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e2a:	bf00      	nop
 8002e2c:	3754      	adds	r7, #84	; 0x54
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fd4b 	bl	80028ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b21      	cmp	r3, #33	; 0x21
 8002e70:	d13e      	bne.n	8002ef0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d114      	bne.n	8002ea6 <UART_Transmit_IT+0x48>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d110      	bne.n	8002ea6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	1c9a      	adds	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	621a      	str	r2, [r3, #32]
 8002ea4:	e008      	b.n	8002eb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6211      	str	r1, [r2, #32]
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fcc6 	bl	80028b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08c      	sub	sp, #48	; 0x30
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b22      	cmp	r3, #34	; 0x22
 8002f40:	f040 80ab 	bne.w	800309a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d117      	bne.n	8002f7e <UART_Receive_IT+0x50>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	1c9a      	adds	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e026      	b.n	8002fcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d007      	beq.n	8002fa2 <UART_Receive_IT+0x74>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <UART_Receive_IT+0x82>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e008      	b.n	8002fc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d15a      	bne.n	8003096 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0220 	bic.w	r2, r2, #32
 8002fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	2b01      	cmp	r3, #1
 800301e:	d135      	bne.n	800308c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f023 0310 	bic.w	r3, r3, #16
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	623a      	str	r2, [r7, #32]
 8003048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	61bb      	str	r3, [r7, #24]
   return(result);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e5      	bne.n	8003026 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d10a      	bne.n	800307e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fc3b 	bl	8002900 <HAL_UARTEx_RxEventCallback>
 800308a:	e002      	b.n	8003092 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fc19 	bl	80028c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e002      	b.n	800309c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3730      	adds	r7, #48	; 0x30
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a8:	b0c0      	sub	sp, #256	; 0x100
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	ea40 0301 	orr.w	r3, r0, r1
 80030cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	431a      	orrs	r2, r3
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030fc:	f021 010c 	bic.w	r1, r1, #12
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800310a:	430b      	orrs	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	6999      	ldr	r1, [r3, #24]
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	ea40 0301 	orr.w	r3, r0, r1
 800312a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b8f      	ldr	r3, [pc, #572]	; (8003370 <UART_SetConfig+0x2cc>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d005      	beq.n	8003144 <UART_SetConfig+0xa0>
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b8d      	ldr	r3, [pc, #564]	; (8003374 <UART_SetConfig+0x2d0>)
 8003140:	429a      	cmp	r2, r3
 8003142:	d104      	bne.n	800314e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7ff f802 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8003148:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800314c:	e003      	b.n	8003156 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314e:	f7fe ffe9 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8003152:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	f040 810c 	bne.w	800337c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003168:	2200      	movs	r2, #0
 800316a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800316e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003172:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	1891      	adds	r1, r2, r2
 800317c:	65b9      	str	r1, [r7, #88]	; 0x58
 800317e:	415b      	adcs	r3, r3
 8003180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003182:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003186:	4621      	mov	r1, r4
 8003188:	eb12 0801 	adds.w	r8, r2, r1
 800318c:	4629      	mov	r1, r5
 800318e:	eb43 0901 	adc.w	r9, r3, r1
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800319e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a6:	4690      	mov	r8, r2
 80031a8:	4699      	mov	r9, r3
 80031aa:	4623      	mov	r3, r4
 80031ac:	eb18 0303 	adds.w	r3, r8, r3
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031b4:	462b      	mov	r3, r5
 80031b6:	eb49 0303 	adc.w	r3, r9, r3
 80031ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031d2:	460b      	mov	r3, r1
 80031d4:	18db      	adds	r3, r3, r3
 80031d6:	653b      	str	r3, [r7, #80]	; 0x50
 80031d8:	4613      	mov	r3, r2
 80031da:	eb42 0303 	adc.w	r3, r2, r3
 80031de:	657b      	str	r3, [r7, #84]	; 0x54
 80031e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031e8:	f7fc fff6 	bl	80001d8 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4b61      	ldr	r3, [pc, #388]	; (8003378 <UART_SetConfig+0x2d4>)
 80031f2:	fba3 2302 	umull	r2, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	011c      	lsls	r4, r3, #4
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003204:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003208:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	64b9      	str	r1, [r7, #72]	; 0x48
 8003214:	415b      	adcs	r3, r3
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800321c:	4641      	mov	r1, r8
 800321e:	eb12 0a01 	adds.w	sl, r2, r1
 8003222:	4649      	mov	r1, r9
 8003224:	eb43 0b01 	adc.w	fp, r3, r1
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323c:	4692      	mov	sl, r2
 800323e:	469b      	mov	fp, r3
 8003240:	4643      	mov	r3, r8
 8003242:	eb1a 0303 	adds.w	r3, sl, r3
 8003246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800324a:	464b      	mov	r3, r9
 800324c:	eb4b 0303 	adc.w	r3, fp, r3
 8003250:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003260:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003264:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003268:	460b      	mov	r3, r1
 800326a:	18db      	adds	r3, r3, r3
 800326c:	643b      	str	r3, [r7, #64]	; 0x40
 800326e:	4613      	mov	r3, r2
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
 8003276:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800327a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800327e:	f7fc ffab 	bl	80001d8 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4611      	mov	r1, r2
 8003288:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <UART_SetConfig+0x2d4>)
 800328a:	fba3 2301 	umull	r2, r3, r3, r1
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2264      	movs	r2, #100	; 0x64
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	1acb      	subs	r3, r1, r3
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <UART_SetConfig+0x2d4>)
 80032a0:	fba3 2302 	umull	r2, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032ac:	441c      	add	r4, r3
 80032ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032c8:	415b      	adcs	r3, r3
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d0:	4641      	mov	r1, r8
 80032d2:	1851      	adds	r1, r2, r1
 80032d4:	6339      	str	r1, [r7, #48]	; 0x30
 80032d6:	4649      	mov	r1, r9
 80032d8:	414b      	adcs	r3, r1
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032e8:	4659      	mov	r1, fp
 80032ea:	00cb      	lsls	r3, r1, #3
 80032ec:	4651      	mov	r1, sl
 80032ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f2:	4651      	mov	r1, sl
 80032f4:	00ca      	lsls	r2, r1, #3
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	4642      	mov	r2, r8
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003304:	464b      	mov	r3, r9
 8003306:	460a      	mov	r2, r1
 8003308:	eb42 0303 	adc.w	r3, r2, r3
 800330c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800331c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003336:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800333a:	f7fc ff4d 	bl	80001d8 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <UART_SetConfig+0x2d4>)
 8003344:	fba3 1302 	umull	r1, r3, r3, r2
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	2164      	movs	r1, #100	; 0x64
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	3332      	adds	r3, #50	; 0x32
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <UART_SetConfig+0x2d4>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	f003 0207 	and.w	r2, r3, #7
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4422      	add	r2, r4
 800336a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800336c:	e105      	b.n	800357a <UART_SetConfig+0x4d6>
 800336e:	bf00      	nop
 8003370:	40011000 	.word	0x40011000
 8003374:	40011400 	.word	0x40011400
 8003378:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800337c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003386:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800338a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800338e:	4642      	mov	r2, r8
 8003390:	464b      	mov	r3, r9
 8003392:	1891      	adds	r1, r2, r2
 8003394:	6239      	str	r1, [r7, #32]
 8003396:	415b      	adcs	r3, r3
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800339e:	4641      	mov	r1, r8
 80033a0:	1854      	adds	r4, r2, r1
 80033a2:	4649      	mov	r1, r9
 80033a4:	eb43 0501 	adc.w	r5, r3, r1
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	00eb      	lsls	r3, r5, #3
 80033b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b6:	00e2      	lsls	r2, r4, #3
 80033b8:	4614      	mov	r4, r2
 80033ba:	461d      	mov	r5, r3
 80033bc:	4643      	mov	r3, r8
 80033be:	18e3      	adds	r3, r4, r3
 80033c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033c4:	464b      	mov	r3, r9
 80033c6:	eb45 0303 	adc.w	r3, r5, r3
 80033ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033ea:	4629      	mov	r1, r5
 80033ec:	008b      	lsls	r3, r1, #2
 80033ee:	4621      	mov	r1, r4
 80033f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f4:	4621      	mov	r1, r4
 80033f6:	008a      	lsls	r2, r1, #2
 80033f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033fc:	f7fc feec 	bl	80001d8 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4b60      	ldr	r3, [pc, #384]	; (8003588 <UART_SetConfig+0x4e4>)
 8003406:	fba3 2302 	umull	r2, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	011c      	lsls	r4, r3, #4
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003418:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800341c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	61b9      	str	r1, [r7, #24]
 8003428:	415b      	adcs	r3, r3
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003430:	4641      	mov	r1, r8
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6139      	str	r1, [r7, #16]
 8003436:	4649      	mov	r1, r9
 8003438:	414b      	adcs	r3, r1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003448:	4659      	mov	r1, fp
 800344a:	00cb      	lsls	r3, r1, #3
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003452:	4651      	mov	r1, sl
 8003454:	00ca      	lsls	r2, r1, #3
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	4603      	mov	r3, r0
 800345c:	4642      	mov	r2, r8
 800345e:	189b      	adds	r3, r3, r2
 8003460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003464:	464b      	mov	r3, r9
 8003466:	460a      	mov	r2, r1
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	67bb      	str	r3, [r7, #120]	; 0x78
 800347a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003488:	4649      	mov	r1, r9
 800348a:	008b      	lsls	r3, r1, #2
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003492:	4641      	mov	r1, r8
 8003494:	008a      	lsls	r2, r1, #2
 8003496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800349a:	f7fc fe9d 	bl	80001d8 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <UART_SetConfig+0x4e4>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	2164      	movs	r1, #100	; 0x64
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	3332      	adds	r3, #50	; 0x32
 80034b6:	4a34      	ldr	r2, [pc, #208]	; (8003588 <UART_SetConfig+0x4e4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c2:	441c      	add	r4, r3
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c8:	2200      	movs	r2, #0
 80034ca:	673b      	str	r3, [r7, #112]	; 0x70
 80034cc:	677a      	str	r2, [r7, #116]	; 0x74
 80034ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034d2:	4642      	mov	r2, r8
 80034d4:	464b      	mov	r3, r9
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	415b      	adcs	r3, r3
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e2:	4641      	mov	r1, r8
 80034e4:	1851      	adds	r1, r2, r1
 80034e6:	6039      	str	r1, [r7, #0]
 80034e8:	4649      	mov	r1, r9
 80034ea:	414b      	adcs	r3, r1
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034fa:	4659      	mov	r1, fp
 80034fc:	00cb      	lsls	r3, r1, #3
 80034fe:	4651      	mov	r1, sl
 8003500:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003504:	4651      	mov	r1, sl
 8003506:	00ca      	lsls	r2, r1, #3
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	4603      	mov	r3, r0
 800350e:	4642      	mov	r2, r8
 8003510:	189b      	adds	r3, r3, r2
 8003512:	66bb      	str	r3, [r7, #104]	; 0x68
 8003514:	464b      	mov	r3, r9
 8003516:	460a      	mov	r2, r1
 8003518:	eb42 0303 	adc.w	r3, r2, r3
 800351c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	663b      	str	r3, [r7, #96]	; 0x60
 8003528:	667a      	str	r2, [r7, #100]	; 0x64
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003536:	4649      	mov	r1, r9
 8003538:	008b      	lsls	r3, r1, #2
 800353a:	4641      	mov	r1, r8
 800353c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003540:	4641      	mov	r1, r8
 8003542:	008a      	lsls	r2, r1, #2
 8003544:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003548:	f7fc fe46 	bl	80001d8 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <UART_SetConfig+0x4e4>)
 8003552:	fba3 1302 	umull	r1, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2164      	movs	r1, #100	; 0x64
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	3332      	adds	r3, #50	; 0x32
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <UART_SetConfig+0x4e4>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4422      	add	r2, r4
 8003578:	609a      	str	r2, [r3, #8]
}
 800357a:	bf00      	nop
 800357c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003586:	bf00      	nop
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4d0d      	ldr	r5, [pc, #52]	; (80035c4 <__libc_init_array+0x38>)
 8003590:	4c0d      	ldr	r4, [pc, #52]	; (80035c8 <__libc_init_array+0x3c>)
 8003592:	1b64      	subs	r4, r4, r5
 8003594:	10a4      	asrs	r4, r4, #2
 8003596:	2600      	movs	r6, #0
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	4d0b      	ldr	r5, [pc, #44]	; (80035cc <__libc_init_array+0x40>)
 800359e:	4c0c      	ldr	r4, [pc, #48]	; (80035d0 <__libc_init_array+0x44>)
 80035a0:	f000 f820 	bl	80035e4 <_init>
 80035a4:	1b64      	subs	r4, r4, r5
 80035a6:	10a4      	asrs	r4, r4, #2
 80035a8:	2600      	movs	r6, #0
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	08003624 	.word	0x08003624
 80035c8:	08003624 	.word	0x08003624
 80035cc:	08003624 	.word	0x08003624
 80035d0:	08003628 	.word	0x08003628

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <_init>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr

080035f0 <_fini>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr
